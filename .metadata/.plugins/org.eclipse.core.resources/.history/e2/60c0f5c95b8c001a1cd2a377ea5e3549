package com.policymanagement.controllers;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.policymanagement.dao.ClaimPolicyDao;
import com.policymanagement.dao.PaymentsDao;
import com.policymanagement.dao.PolicyDao;
import com.policymanagement.models.ClaimPolicy;
import com.policymanagement.models.Customer;
import com.policymanagement.models.ForgotUid;
import com.policymanagement.models.Payments;
import com.policymanagement.models.Policy;
import com.policymanagement.models.PolicyVendor;
import com.policymanagement.models.PolicyVendorLogin;
import com.policymanagement.services.PolicyVendorService;
@Controller
@RequestMapping("/policyvendor")


public class PolicyVendorController {
	
		@Autowired
		private PolicyDao policydao;
		@Autowired
		private PolicyVendorService policyvendorService;
		@Autowired
		private PaymentsDao paydao;
		@Autowired
		private ClaimPolicyDao cldao;
		@GetMapping("/")
		public String policyvendorHome(Model model)
		{
			
			model.addAttribute("policyvendor", new PolicyVendorLogin());
			return "policyvendorLogin";
		}
		
		@PostMapping("/policyvendorlogin")
		public String policyvendorLogin(@ModelAttribute("policyvendor") PolicyVendorLogin policyvendorLogin,BindingResult result, Model model,HttpSession session)
		{
			//System.out.println(stLogin);
			if(result.hasErrors())
			{
				return "policyvendorLogin";
			}
			else
			{
				boolean status = policyvendorService.vlogin(policyvendorLogin);
				if(status)
				{
					
					PolicyVendor p1=policyvendorService.getPolicyVendor(policyvendorLogin.getVendorId());
					if(p1.getStatus().equals("activate")) {
					String pname=p1.getPolicyvendorname();
					session.setAttribute("username", pname);
					session.setAttribute("ptype", p1.getPolicytype());
					session.setAttribute("userId", policyvendorLogin.getVendorId());
					return "policyvendorHome";}
					else {
						
						model.addAttribute("message","You are not yet activated by the admin,please wait for Activation");
						return "policyvendorLogin";
					}
				}
			else
			{
				model.addAttribute("message","Invalid Username OR password");
				return "policyvendorLogin";
			}
			
			}
		}
		
		
		@GetMapping("/policyvendorreg")
		public String userpolicyRegisterForm(Model model)
		{
			int pid=policyvendorService.nextvendotId();
			PolicyVendor policyvendor = new PolicyVendor();
			
			policyvendor.setVendorId(pid+1);
			model.addAttribute("policyvendorreg", policyvendor);
			
			return "policyvendorRegistration";
		}

		
		@PostMapping("/policyvendorreg")
		public String registerVendor(@Valid @ModelAttribute("policyvendorreg") PolicyVendor policyvendor,BindingResult result,Model model)
		{
			if(result.hasErrors())
			{
				return "policyvendorRegistration";
			}
			
			else {
				PolicyVendorLogin policyvendorlogin = new PolicyVendorLogin();
				model.addAttribute("policyvendor",policyvendorlogin);
				policyvendor.setStatus("not yet activated");
				policyvendor.setBalance(200000);
				int res = policyvendorService.createPolicyVendor(policyvendor);
				
			if(res==0)
			{
				model.addAttribute("message", policyvendor.getPolicyvendorname().toUpperCase()+" You are already registered");		
			}
			else if(res==1)
			{
				model.addAttribute("message", policyvendor.getPolicyvendorname().toUpperCase()+"Congrats your registration is successfull");
			
			
			}
			else
			{
				model.addAttribute("message", "Some thing went wrong");
			
			}
			
			model.addAttribute("userId",policyvendor.getVendorId());
			return "policyvendorLogin";
			}
		}
		@GetMapping("/addpolicy1")
		public String addPolicy(Model model,HttpSession session) 
		{
			String name=(String)session.getAttribute("username");
			int vid=(Integer)session.getAttribute("userId");
			if(vid == 0||name==null) {
				model.addAttribute("newpolicy", new Policy());
				model.addAttribute("message","please Login First < a href='/policyvendor'>");
				return "policyvendorHome";
				
			}
			model.addAttribute("newpolicy", new Policy());
			return "addPolicy";
		}
		@PostMapping("/addpolicy")
		public String createPolicy(@ModelAttribute("newpolicy")Policy policy,Model model) {
			boolean status=policyvendorService.addPolicy(policy);
			if(status) {
				model.addAttribute("message","Policy Created");
				return "policyvendorHome";
			}
			else {
				model.addAttribute("message","Policy not Created, something went wrong");
				return "policyvendorHome";
			}
		}
		
		@GetMapping("/listpolicies")
		public String listmypolicies(HttpSession session,Model model) {
			List<Policy> policy=policyvendorService.getAllpolicies();
			int id=(Integer)session.getAttribute("userId");
			for(Policy p3:policy) {
				if(p3.getPolicyvendorId()==id)
				{
					model.addAttribute("policyl",p3);
				}
			}
			return "policyvendorHome";
		}
		
		@GetMapping("/editpolicy")
		public String editpolicydetails(@RequestParam("policyid")int pid,Model model,HttpSession session)
		{
			session.setAttribute("polid", pid);
			Policy p=policyvendorService.getpolbyid(pid);
			model.addAttribute("policy",p);
			return "editPolicy";
		}
		@PostMapping("/addeditpolicy")
		public String editedPolicy(@ModelAttribute("policy")Policy pol,Model model) {
			
			boolean status=policyvendorService.addPolicy(pol);
			if(status) {
				model.addAttribute("message","Policy edited Created");
				return "policyvendorHome";
			}
			else {
				model.addAttribute("message","Policy not Created, something went wrong");
				return "policyvendorHome";
			}
			
		}
		@GetMapping("/claims")
		public String seeclaims(HttpSession session,Model model)
		{
			int id=(Integer)session.getAttribute("userId");
			List<Policy> policy=policyvendorService.getAllpolicies();
			List<Payments> pay=paydao.findAll();
			List<ClaimPolicy> cl=cldao.findAll();
			for(ClaimPolicy cp:cl)
			{
				for(Payments p:pay)
				{
					if(cp.getPayid()==p.getPayid()) {
					for(Policy po:policy)
					{
						if(p.getPolicyId()==po.getPolicyId() && po.getPolicyvendorId()==id)
						{
							model.addAttribute("claimlist", cp);
						}
					}
					}
				}
			}
			
			return "policyvendorHome";
			
		}
	
	  @GetMapping("/acceptclaim") 
	  public String claimstatus1(@RequestParam("cid")int id,Model model) { 
		  ClaimPolicy claim=cldao.findByclaimid(id); 
		  
	  ClaimPolicy claimp=new ClaimPolicy();
	  claimp.setClaimid(claim.getClaimid());
	  claimp.setPayid(claim.getPayid());
	  claimp.setPolicyname(claim.getPolicyname());
	  claimp.setUserid(claim.getUserid());
	  claimp.setReasonbyc(claim.getReasonbyc());
	  model.addAttribute("reason", claimp);
	  return "claimformp";
	  
	  }
	 @PostMapping("/claimp")
	 public String climstatus2(@ModelAttribute("reason")ClaimPolicy claim1,Model model)
	 {
		 Payments p;
		 
		 if(claim1.getCstatus()!="approved") {
			 System.out.println("in if");
			 claim1.setCstatus("approved");
			 System.out.println("after aprove");
			 cldao.save(claim1);
			 System.out.println("after aprove1");
			 int payid=claim1.getPayid();
			 System.out.println("after aprove2");
			 p=paydao.findByPayid(payid);
			 System.out.println(p);
			p.setPaystatus("claimed");
			paydao.save(p);
			 System.out.println("rtyui");
			 model.addAttribute("message", "claim response Successfull");
		 }
		 
		 return "policyvendorHome";
	 }
	 @GetMapping("/rejectclaim") 
	  public String claimstatus3(@RequestParam("cid")int id,Model model) { 
		  ClaimPolicy claim=cldao.findByclaimid(id); 
		  
	  ClaimPolicy claimp=new ClaimPolicy();
	  claimp.setClaimid(claim.getClaimid());
	  claimp.setPayid(claim.getPayid());
	  claimp.setPolicyname(claim.getPolicyname());
	  claimp.setUserid(claim.getUserid());
	  claimp.setReasonbyc(claim.getReasonbyc());
	  model.addAttribute("reason1", claimp);
	  return "claimformpr";
	  
	  }
	 @PostMapping("/claimp1")
	 public String climstatus4(@ModelAttribute("reason1")ClaimPolicy claim1,Model model)
	 {
		 Payments p;
		 
		 if(claim1.getCstatus()!="rejected") {
			 System.out.println("in if");
			 claim1.setCstatus("rejected");
			 System.out.println("after aprove");
			 cldao.save(claim1);
			 System.out.println("after aprove1");
			 int payid=claim1.getPayid();
			 System.out.println("after aprove2");
			 p=paydao.findByPayid(payid);
			 System.out.println(p);
			p.setPaystatus("claim rejected");
			paydao.save(p);
			 System.out.println("rtyui");
			 model.addAttribute("message", "claim response Successfull");
		 }
		 
		 return "policyvendorHome";
	 }
	 @GetMapping("/pforgotuid")
		public String fid(Model model){
			model.addAttribute("name",new ForgotUid());
			return "PvForgotid";
		}
		@PostMapping("/cforgotuid1")
		public String fid1(@ModelAttribute("name") ForgotUid fid,Customer customer,Model model)
		{
			int b=custser.fid(fid);
			if(b!=0)
			{
		  	model.addAttribute("message",b+" is your id");
			}
			else
			{
				model.addAttribute("message", "Incorrect credentials");
			}
			return "CusForgotid";
		}
		@GetMapping("/cforgotpswd")
		public String fpwd(Model model){
			model.addAttribute("name1",new ForgotUid());
			return "CusForgotPwd";
		}
		@PostMapping("/cforgotpwd1")
		public String fpwd1(@ModelAttribute("name1") ForgotUid fid,Model model)
		{
			boolean b=custser.fpwd(fid);
			if(b==true)
			{
				
		  	  return "CusResetPwd";
			}
			else
			{
				model.addAttribute("message", "Incorrect credentials");
				return "CusResetPwd";
			}
		}
		@PostMapping("/cupdatepwd")
		public String updatePassword(@ModelAttribute("name1") ForgotUid forgetUID,Model model)
		{
			Customer cd =custdao.findByUserId(forgetUID.getUid());
			cd.setPassword(forgetUID.getPwd());
			custdao.save(cd);
			model.addAttribute("message","your password has been updated");
			return "CusResetPwd";
		}
	
		@GetMapping("/logout")
		public String logout(HttpSession session)
		{
			session.invalidate();
			return "redirect:/";
		}


	}